import tensorflow as tf
from tensorflow.keras import layers, models
from tensorflow.keras.preprocessing.image import ImageDataGenerator
import matplotlib.pyplot as plt

# Config
h = w = 150 
bat = 32
eps = 20


train_gen = ImageDataGenerator(
    rescale=1./255,
    rotation_range=40,
    width_shift_range=0.2,
    height_shift_range=0.2,
    shear_range=0.2,
    zoom_range=0.2,
    horizontal_flip=True,
    validation_split=0.2
)

val_gen = ImageDataGenerator(rescale=1./255, validation_split=0.2)


trn = train_gen.flow_from_directory(
    'dataset',
    target_size=(h,w),
    batch_size=bat,
    class_mode='binary',
    subset='training'
)

val = val_gen.flow_from_directory(
    'dataset', 
    target_size=(h,w),
    batch_size=bat,
    class_mode='binary',
    subset='validation'
)


def get_model():
    return models.Sequential([
        layers.Conv2D(32, 3, activation='relu', input_shape=(h,w,3)),
        layers.MaxPooling2D(),
        layers.Conv2D(64, 3, activation='relu'),
        layers.MaxPooling2D(),
        layers.Conv2D(64, 3, activation='relu'),
        layers.MaxPooling2D(),
        layers.Conv2D(128, 3, activation='relu'),
        layers.MaxPooling2D(),
        layers.Flatten(),
        layers.Dense(128, activation='relu'),
        layers.Dropout(0.5),
        layers.Dense(1, activation='sigmoid')
    ])


m = get_model()
m.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])
h = m.fit(trn, epochs=eps, validation_data=val)
m.save('model.h5')


def plot_hist(h):
    a = h.history['accuracy']
    va = h.history['val_accuracy']
    l = h.history['loss']
    vl = h.history['val_loss']
    
    plt.figure(figsize=(12,4))
    plt.subplot(1,2,1)
    plt.plot(range(eps), a, label='Train Acc')
    plt.plot(range(eps), va, label='Val Acc')
    plt.title('Accuracy')
    plt.legend()
    
    plt.subplot(1,2,2) 
    plt.plot(range(eps), l, label='Train Loss')
    plt.plot(range(eps), vl, label='Val Loss')
    plt.title('Loss')
    plt.legend()
    plt.show()

plot_hist(h)
